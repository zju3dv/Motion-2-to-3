_target_: hmr4d.model.supermotion.pipeline.pipeline_minimal_mocap.PipelineMinimalMocap

args:
  diffusion_steps: 100
  # Scheduler
  scheduler_opt_train: # Always DDPM
    beta_schedule: squaredcos_cap_v2 # cosine instead of linear
    prediction_type: sample
    clip_sample: False
    timestep_spacing: "linspace"
    num_train_timesteps: ${..diffusion_steps}
  scheduler_opt_sample:
    _target_: diffusers.schedulers.DDPMScheduler # potentially DDIM
    beta_schedule: squaredcos_cap_v2 # cosine instead of linear
    prediction_type: sample
    clip_sample: False
    timestep_spacing: "linspace"
    num_train_timesteps: ${..diffusion_steps}

  # Sample
  num_inference_steps: ${.diffusion_steps}
  enable_record_progress: False
  num_visualize: ${.diffusion_steps}
  guidance_scale: 1.0

  # Encode/Decode Func
  endecoder_opt: null # Should be overriden by the experiment config

  # Setting
  wo_diffusion: False # use learned initialization instead of noise
  guidance_after: 0 # e.g. 10 -> [9, 0]

  # Loss
  ###### RoHM weights ######
  # loss_pos_weight: 100.0
  # loss_vel_weight: 1000.0
  # loss_contact_weight: 0.1
  ##########################
  weights: # extra loss
    cr_j3d: 0.
    cr_verts: 0.
    transl_c: 0.
    j2d: 0.

    fk_pos: 0.0
    fk_vel: 0.0
    fk_contact: 0.0

args_denoiser3d: null # Should be overriden by the experiment config
